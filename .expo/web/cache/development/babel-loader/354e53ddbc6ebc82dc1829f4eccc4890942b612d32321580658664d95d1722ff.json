{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { StyleSheet, SafeAreaView, I18nManager, StatusBar, Platform } from 'react-native';\nimport { AppProvider, useAppContext } from './src/context/AppContext';\nimport { ThemeProvider } from './src/context/ThemeContext';\nimport HomeScreen from './src/screens/HomeScreen';\n\n// Enable RTL layout if needed\nif (!I18nManager.isRTL) {\n  I18nManager.allowRTL(true);\n}\n\n// Main app component that handles RTL forcing\nfunction AppContent() {\n  const {\n    state\n  } = useAppContext();\n  useEffect(() => {\n    const shouldForceRTL = state.language === 'ar' || state.forceRTL;\n    if (shouldForceRTL !== I18nManager.isRTL) {\n      I18nManager.forceRTL(shouldForceRTL);\n      // Note: In production, you might want to restart the app here\n      // RNRestart.Restart(); // if using react-native-restart\n    }\n  }, [state.language, state.forceRTL]);\n  return <SafeAreaView style={styles.container}>\r\n      <StatusBar barStyle={Platform.OS === 'ios' ? 'dark-content' : 'light-content'} backgroundColor=\"transparent\" translucent={Platform.OS === 'android'} />\r\n      <HomeScreen />\r\n    </SafeAreaView>;\n}\nexport default function App() {\n  return <ThemeProvider>\r\n      <AppProvider>\r\n        <AppContent />\r\n      </AppProvider>\r\n    </ThemeProvider>;\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useEffect","StyleSheet","SafeAreaView","I18nManager","StatusBar","Platform","AppProvider","useAppContext","ThemeProvider","HomeScreen","isRTL","allowRTL","AppContent","state","shouldForceRTL","language","forceRTL","styles","container","OS","App","create","flex"],"sources":["C:/Users/Manuka Honey/Desktop/timeing-box/App.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { StyleSheet, SafeAreaView, I18nManager, StatusBar, Platform } from 'react-native';\r\nimport { AppProvider, useAppContext } from './src/context/AppContext';\r\nimport { ThemeProvider } from './src/context/ThemeContext';\r\nimport HomeScreen from './src/screens/HomeScreen';\r\n\r\n// Enable RTL layout if needed\r\nif (!I18nManager.isRTL) {\r\n  I18nManager.allowRTL(true);\r\n}\r\n\r\n// Main app component that handles RTL forcing\r\nfunction AppContent() {\r\n  const { state } = useAppContext();\r\n  \r\n  useEffect(() => {\r\n    const shouldForceRTL = state.language === 'ar' || state.forceRTL;\r\n    if (shouldForceRTL !== I18nManager.isRTL) {\r\n      I18nManager.forceRTL(shouldForceRTL);\r\n      // Note: In production, you might want to restart the app here\r\n      // RNRestart.Restart(); // if using react-native-restart\r\n    }\r\n  }, [state.language, state.forceRTL]);\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar\r\n        barStyle={Platform.OS === 'ios' ? 'dark-content' : 'light-content'}\r\n        backgroundColor=\"transparent\"\r\n        translucent={Platform.OS === 'android'}\r\n      />\r\n      <HomeScreen />\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <AppProvider>\r\n        <AppContent />\r\n      </AppProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,UAAU,EAAEC,YAAY,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,cAAc;AACzF,SAASC,WAAW,EAAEC,aAAa,QAAQ,0BAA0B;AACrE,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA,IAAI,CAACN,WAAW,CAACO,KAAK,EAAE;EACtBP,WAAW,CAACQ,QAAQ,CAAC,IAAI,CAAC;AAC5B;;AAEA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpB,MAAM;IAAEC;EAAM,CAAC,GAAGN,aAAa,CAAC,CAAC;EAEjCP,SAAS,CAAC,MAAM;IACd,MAAMc,cAAc,GAAGD,KAAK,CAACE,QAAQ,KAAK,IAAI,IAAIF,KAAK,CAACG,QAAQ;IAChE,IAAIF,cAAc,KAAKX,WAAW,CAACO,KAAK,EAAE;MACxCP,WAAW,CAACa,QAAQ,CAACF,cAAc,CAAC;MACpC;MACA;IACF;EACF,CAAC,EAAE,CAACD,KAAK,CAACE,QAAQ,EAAEF,KAAK,CAACG,QAAQ,CAAC,CAAC;EAEpC,OACE,CAAC,YAAY,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,SAAS,CAAC,CAAC;AAC3C,MAAM,CAAC,SAAS,CACR,QAAQ,CAAC,CAACb,QAAQ,CAACc,EAAE,KAAK,KAAK,GAAG,cAAc,GAAG,eAAe,CAAC,CACnE,eAAe,CAAC,aAAa,CAC7B,WAAW,CAAC,CAACd,QAAQ,CAACc,EAAE,KAAK,SAAS,CAAC,GACvC;AACR,MAAM,CAAC,UAAU,GAAG;AACpB,IAAI,EAAE,YAAY,CAAC;AAEnB;AAEA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,OACE,CAAC,aAAa,CAAC;AACnB,MAAM,CAAC,WAAW,CAAC;AACnB,QAAQ,CAAC,UAAU,GAAG;AACtB,MAAM,EAAE,WAAW,CAAC;AACpB,IAAI,EAAE,aAAa,CAAC;AAEpB;AAEA,MAAMH,MAAM,GAAGhB,UAAU,CAACoB,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE;EACR;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}